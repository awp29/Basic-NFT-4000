{
  "address": "0x1FE37a7367D5c2867641E2Cc8B45455Bc3D19A22",
  "abi": [
    {
      "inputs": [],
      "name": "NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddres",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceNotMet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListedItem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicNFTMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3587172000192cfdc0870bcf94b4c12f427d1a4ed8e50c353d04350baa5b8b11",
  "receipt": {
    "to": null,
    "from": "0xC56f52C1f6cA01F9381071ef0D71D27f36f9a22d",
    "contractAddress": "0x1FE37a7367D5c2867641E2Cc8B45455Bc3D19A22",
    "transactionIndex": 19,
    "gasUsed": "1044873",
    "logsBloom": "0x
    "blockHash": "0x9ff546a35513365d24a3961847849a7921fdb895abfd06212ff5d9d950bde19f",
    "transactionHash": "0x3587172000192cfdc0870bcf94b4c12f427d1a4ed8e50c353d04350baa5b8b11",
    "logs": [],
    "blockNumber": 7865472,
    "cumulativeGasUsed": "3089570",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1814b0ef6cec5b2348dab4497a691fca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddres\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListedItem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicNFTMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasicNFTMarketplace.sol\":\"BasicNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BasicNFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nerror NotOwner();\\nerror NotApprovedForMarketplace();\\nerror NotListed(address nftAddres, uint256 tokenId);\\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\nerror NoProceeds();\\n\\ncontract BasicNFTMarketplace is ReentrancyGuard {\\n  struct Listing {\\n    address seller;\\n    uint256 price;\\n  }\\n\\n  event ListedItem(\\n    address indexed seller,\\n    address indexed nftAddress,\\n    uint256 indexed tokenId,\\n    string tokenUri,\\n    uint256 price\\n  );\\n\\n  event ItemBought(\\n    address indexed buyer,\\n    address indexed nftAddress,\\n    uint256 indexed tokenId,\\n    uint256 price\\n  );\\n\\n  // s_listings[sellerAddress][tokenId] returns Listing\\n  mapping(address => mapping(uint256 => Listing)) private s_listings;\\n  mapping(address => uint256) private s_proceeds;\\n\\n  modifier isOwnerOfNFT(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address spender\\n  ) {\\n    IERC721 nft = IERC721(nftAddress);\\n    address owner = nft.ownerOf(tokenId);\\n    if (spender != owner) {\\n      revert NotOwner();\\n    }\\n    _;\\n  }\\n\\n  modifier isListed(address nftAddress, uint256 tokenId) {\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\n    if (listing.price <= 0) {\\n      revert NotListed(nftAddress, tokenId);\\n    }\\n    _;\\n  }\\n\\n  function listItem(\\n    address nftAddress,\\n    uint256 tokenId,\\n    string memory tokenUri\\n  ) external isOwnerOfNFT(nftAddress, tokenId, msg.sender) {\\n    IERC721 nft = IERC721(nftAddress);\\n    if (nft.getApproved(tokenId) != address(this)) {\\n      revert NotApprovedForMarketplace();\\n    }\\n\\n    s_listings[nftAddress][tokenId] = Listing(msg.sender, 100000000000000000); // 0.1 ETH\\n    emit ListedItem(msg.sender, nftAddress, tokenId, tokenUri, 100000000000000000);\\n  }\\n\\n  function buyItem(address nftAddress, uint256 tokenId)\\n    external\\n    payable\\n    isListed(nftAddress, tokenId)\\n    nonReentrant\\n  {\\n    Listing memory listedItem = s_listings[nftAddress][tokenId];\\n    if (msg.value < listedItem.price) {\\n      revert PriceNotMet(nftAddress, tokenId, listedItem.price);\\n    }\\n\\n    s_proceeds[listedItem.seller] += msg.value;\\n\\n    IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);\\n    emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\\n  }\\n\\n  function withdrawProceeds() external {\\n    uint256 proceeds = s_proceeds[msg.sender];\\n    if (proceeds <= 0) {\\n      revert NoProceeds();\\n    }\\n    s_proceeds[msg.sender] = 0;\\n    (bool success, ) = payable(msg.sender).call{value: proceeds}('');\\n    require(success, 'Transfer failed');\\n  }\\n\\n  function getListing(address nftAddress, uint256 tokenId) external view returns (Listing memory) {\\n    return s_listings[nftAddress][tokenId];\\n  }\\n\\n  function getProceeds(address seller) external view returns (uint256) {\\n    return s_proceeds[seller];\\n  }\\n}\\n\",\"keccak256\":\"0xa48ac53d6758b298febf057d59306704da5347f8117588c90bad81a6be64dc94\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061119b806100286000396000f3fe60806040526004361061004a5760003560e01c80631b4ce7c51461004f57806330cfeda91461007857806388700d1c146100b55780639038e693146100f25780639f37092a14610109575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610c9a565b610125565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610d09565b610445565b6040516100ac9190610d45565b60405180910390f35b3480156100c157600080fd5b506100dc60048036038101906100d79190610d60565b61048e565b6040516100e99190610ded565b60405180910390f35b3480156100fe57600080fd5b50610107610559565b005b610123600480360381019061011e9190610d60565b6106cc565b005b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101689190610d45565b602060405180830381865afa158015610185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a99190610e1d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610210576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008890503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8a6040518263ffffffff1660e01b81526004016102659190610d45565b602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610e1d565b73ffffffffffffffffffffffffffffffffffffffff16146102f3576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200167016345785d8a0000815250600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa98b2da95f047337c69af084fb805291b43b364f8c51ccf19a70ac6647fb2e758a67016345785d8a0000604051610432929190610f0e565b60405180910390a4505050505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610496610a7c565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116105d7576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161064290610f6f565b60006040518083038185875af1925050503d806000811461067f576040519150601f19603f3d011682016040523d82523d6000602084013e610684565b606091505b50509050806106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90610fd0565b60405180910390fd5b5050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060008160200151116107d85782826040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016107cf929190610fff565b60405180910390fd5b60026000540361081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490611074565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050806020015134101561093557858582602001516040517f7c93456500000000000000000000000000000000000000000000000000000000815260040161092c93929190611094565b60405180910390fd5b3460026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461098891906110fa565b925050819055508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826000015133886040518463ffffffff1660e01b81526004016109d09392919061112e565b600060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1878460200151604051610a649190610d45565b60405180910390a45060016000819055505050505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aeb82610ac0565b9050919050565b610afb81610ae0565b8114610b0657600080fd5b50565b600081359050610b1881610af2565b92915050565b6000819050919050565b610b3181610b1e565b8114610b3c57600080fd5b50565b600081359050610b4e81610b28565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ba782610b5e565b810181811067ffffffffffffffff82111715610bc657610bc5610b6f565b5b80604052505050565b6000610bd9610aac565b9050610be58282610b9e565b919050565b600067ffffffffffffffff821115610c0557610c04610b6f565b5b610c0e82610b5e565b9050602081019050919050565b82818337600083830152505050565b6000610c3d610c3884610bea565b610bcf565b905082815260208101848484011115610c5957610c58610b59565b5b610c64848285610c1b565b509392505050565b600082601f830112610c8157610c80610b54565b5b8135610c91848260208601610c2a565b91505092915050565b600080600060608486031215610cb357610cb2610ab6565b5b6000610cc186828701610b09565b9350506020610cd286828701610b3f565b925050604084013567ffffffffffffffff811115610cf357610cf2610abb565b5b610cff86828701610c6c565b9150509250925092565b600060208284031215610d1f57610d1e610ab6565b5b6000610d2d84828501610b09565b91505092915050565b610d3f81610b1e565b82525050565b6000602082019050610d5a6000830184610d36565b92915050565b60008060408385031215610d7757610d76610ab6565b5b6000610d8585828601610b09565b9250506020610d9685828601610b3f565b9150509250929050565b610da981610ae0565b82525050565b610db881610b1e565b82525050565b604082016000820151610dd46000850182610da0565b506020820151610de76020850182610daf565b50505050565b6000604082019050610e026000830184610dbe565b92915050565b600081519050610e1781610af2565b92915050565b600060208284031215610e3357610e32610ab6565b5b6000610e4184828501610e08565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e84578082015181840152602081019050610e69565b60008484015250505050565b6000610e9b82610e4a565b610ea58185610e55565b9350610eb5818560208601610e66565b610ebe81610b5e565b840191505092915050565b6000819050919050565b6000819050919050565b6000610ef8610ef3610eee84610ec9565b610ed3565b610b1e565b9050919050565b610f0881610edd565b82525050565b60006040820190508181036000830152610f288185610e90565b9050610f376020830184610eff565b9392505050565b600081905092915050565b50565b6000610f59600083610f3e565b9150610f6482610f49565b600082019050919050565b6000610f7a82610f4c565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610fba600f83610e55565b9150610fc582610f84565b602082019050919050565b60006020820190508181036000830152610fe981610fad565b9050919050565b610ff981610ae0565b82525050565b60006040820190506110146000830185610ff0565b6110216020830184610d36565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061105e601f83610e55565b915061106982611028565b602082019050919050565b6000602082019050818103600083015261108d81611051565b9050919050565b60006060820190506110a96000830186610ff0565b6110b66020830185610d36565b6110c36040830184610d36565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061110582610b1e565b915061111083610b1e565b9250828201905080821115611128576111276110cb565b5b92915050565b60006060820190506111436000830186610ff0565b6111506020830185610ff0565b61115d6040830184610d36565b94935050505056fea2646970667358221220f3bd44b728236d830f1e1797a17f2a0701756ae987cb8c7a61145290082dad1264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80631b4ce7c51461004f57806330cfeda91461007857806388700d1c146100b55780639038e693146100f25780639f37092a14610109575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610c9a565b610125565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610d09565b610445565b6040516100ac9190610d45565b60405180910390f35b3480156100c157600080fd5b506100dc60048036038101906100d79190610d60565b61048e565b6040516100e99190610ded565b60405180910390f35b3480156100fe57600080fd5b50610107610559565b005b610123600480360381019061011e9190610d60565b6106cc565b005b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101689190610d45565b602060405180830381865afa158015610185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a99190610e1d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610210576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008890503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8a6040518263ffffffff1660e01b81526004016102659190610d45565b602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610e1d565b73ffffffffffffffffffffffffffffffffffffffff16146102f3576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200167016345785d8a0000815250600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa98b2da95f047337c69af084fb805291b43b364f8c51ccf19a70ac6647fb2e758a67016345785d8a0000604051610432929190610f0e565b60405180910390a4505050505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610496610a7c565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116105d7576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161064290610f6f565b60006040518083038185875af1925050503d806000811461067f576040519150601f19603f3d011682016040523d82523d6000602084013e610684565b606091505b50509050806106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90610fd0565b60405180910390fd5b5050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060008160200151116107d85782826040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016107cf929190610fff565b60405180910390fd5b60026000540361081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490611074565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050806020015134101561093557858582602001516040517f7c93456500000000000000000000000000000000000000000000000000000000815260040161092c93929190611094565b60405180910390fd5b3460026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461098891906110fa565b925050819055508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826000015133886040518463ffffffff1660e01b81526004016109d09392919061112e565b600060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1878460200151604051610a649190610d45565b60405180910390a45060016000819055505050505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aeb82610ac0565b9050919050565b610afb81610ae0565b8114610b0657600080fd5b50565b600081359050610b1881610af2565b92915050565b6000819050919050565b610b3181610b1e565b8114610b3c57600080fd5b50565b600081359050610b4e81610b28565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ba782610b5e565b810181811067ffffffffffffffff82111715610bc657610bc5610b6f565b5b80604052505050565b6000610bd9610aac565b9050610be58282610b9e565b919050565b600067ffffffffffffffff821115610c0557610c04610b6f565b5b610c0e82610b5e565b9050602081019050919050565b82818337600083830152505050565b6000610c3d610c3884610bea565b610bcf565b905082815260208101848484011115610c5957610c58610b59565b5b610c64848285610c1b565b509392505050565b600082601f830112610c8157610c80610b54565b5b8135610c91848260208601610c2a565b91505092915050565b600080600060608486031215610cb357610cb2610ab6565b5b6000610cc186828701610b09565b9350506020610cd286828701610b3f565b925050604084013567ffffffffffffffff811115610cf357610cf2610abb565b5b610cff86828701610c6c565b9150509250925092565b600060208284031215610d1f57610d1e610ab6565b5b6000610d2d84828501610b09565b91505092915050565b610d3f81610b1e565b82525050565b6000602082019050610d5a6000830184610d36565b92915050565b60008060408385031215610d7757610d76610ab6565b5b6000610d8585828601610b09565b9250506020610d9685828601610b3f565b9150509250929050565b610da981610ae0565b82525050565b610db881610b1e565b82525050565b604082016000820151610dd46000850182610da0565b506020820151610de76020850182610daf565b50505050565b6000604082019050610e026000830184610dbe565b92915050565b600081519050610e1781610af2565b92915050565b600060208284031215610e3357610e32610ab6565b5b6000610e4184828501610e08565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e84578082015181840152602081019050610e69565b60008484015250505050565b6000610e9b82610e4a565b610ea58185610e55565b9350610eb5818560208601610e66565b610ebe81610b5e565b840191505092915050565b6000819050919050565b6000819050919050565b6000610ef8610ef3610eee84610ec9565b610ed3565b610b1e565b9050919050565b610f0881610edd565b82525050565b60006040820190508181036000830152610f288185610e90565b9050610f376020830184610eff565b9392505050565b600081905092915050565b50565b6000610f59600083610f3e565b9150610f6482610f49565b600082019050919050565b6000610f7a82610f4c565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610fba600f83610e55565b9150610fc582610f84565b602082019050919050565b60006020820190508181036000830152610fe981610fad565b9050919050565b610ff981610ae0565b82525050565b60006040820190506110146000830185610ff0565b6110216020830184610d36565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061105e601f83610e55565b915061106982611028565b602082019050919050565b6000602082019050818103600083015261108d81611051565b9050919050565b60006060820190506110a96000830186610ff0565b6110b66020830185610d36565b6110c36040830184610d36565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061110582610b1e565b915061111083610b1e565b9250828201905080821115611128576111276110cb565b5b92915050565b60006060820190506111436000830186610ff0565b6111506020830185610ff0565b61115d6040830184610d36565b94935050505056fea2646970667358221220f3bd44b728236d830f1e1797a17f2a0701756ae987cb8c7a61145290082dad1264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/BasicNFTMarketplace.sol:BasicNFTMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2004,
        "contract": "contracts/BasicNFTMarketplace.sol:BasicNFTMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)1975_storage))"
      },
      {
        "astId": 2008,
        "contract": "contracts/BasicNFTMarketplace.sol:BasicNFTMarketplace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)1975_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BasicNFTMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)1975_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)1975_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BasicNFTMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)1975_storage"
      },
      "t_struct(Listing)1975_storage": {
        "encoding": "inplace",
        "label": "struct BasicNFTMarketplace.Listing",
        "members": [
          {
            "astId": 1972,
            "contract": "contracts/BasicNFTMarketplace.sol:BasicNFTMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1974,
            "contract": "contracts/BasicNFTMarketplace.sol:BasicNFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}